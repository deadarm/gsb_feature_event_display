<?php
/**
 * @file
 * Code for the GSB Feature Event Display feature.
 */

include_once 'gsb_feature_event_display.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function gsb_feature_event_display_ctools_plugin_directory($module, $plugin) {
 if ($module == 'ctools' && !empty($plugin)) {
   return "plugins/$plugin";
 }
}

/**
 * Implementation of hook_form_FORM_ID_alter()
 *
 * Provides customizations to the views content type settings form
 */
function gsb_feature_event_display_form_views_content_views_panes_content_type_edit_form_alter(&$form, &$form_state, $form_id) {
  // Remove the default value for upcoming events.
  if (in_array($form_state['subtype_name'], array('gsb_event-upcoming_events'))) {
    $form['content_settings']['view_mode']['#default_value'] = '';
  }

  if (isset($form["display_settings"])) {
    if (isset($form["display_settings"]["view_settings"])) {
      $form["display_settings"]["view_settings"]['#access'] = FALSE;
    }
    if (isset($form["display_settings"]["header_type"])) {
      $form["display_settings"]["header_type"]['#access'] = FALSE;
    }
  }
  if (isset($form["content_settings"])) {
    $form["content_settings"]['#access'] = FALSE;
  }
}

/**
 * Implementation of hook_module_implements_alter()
 */
function gsb_feature_event_display_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    if (isset($implementations['gsb_feature_event_display'])) {
      $group = $implementations['gsb_feature_event_display'];
      unset($implementations['gsb_feature_event_display']);
      $implementations['gsb_feature_event_display'] = $group;
    }
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function gsb_feature_event_display_field_extra_fields() {
  $extra = array();
  // Add an extra field for iCal links.
  $extra['node']['event']['display']['gsb_feature_event_display_ical'] = array(
    'label' => t('iCal URL'),
    'description' => t('A link to an iCal event'),
    'weight' => 0,
  );
  return $extra;
}

/**
 * Implements hook_node_view().
 */
function gsb_feature_event_display_node_view($node, $view_mode, $langcode) {
  // Only process events.
  if ($node->type != 'event') {
    return;
  }

  // Add a link for the iCal event.
  $node->content['gsb_feature_event_display_ical'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'event-ical-link',
      ),
    ),
    'link' => array(
      '#type' => 'link',
      '#title' => t('Add to My Calendar'),
      '#href' => 'events/ical/' . $node->nid . '/event.ics',
      '#attributes' => array(
        'class' => array(
          'green-rounded-button',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_preprocess_HOOK() for node.tpl.php.
 */
function gsb_feature_event_display_preprocess_node(&$variables) {
  // Give the event listing the same class as teaser to trick the CSS.
  if ($variables['type'] == 'event' && $variables['view_mode'] == 'event_listing') {
    $variables['classes_array'][] = 'view-mode-teaser';
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for views_exposed_form().
 */
function gsb_feature_event_display_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  if ($form_state['view']->name == 'gsb_event') {
    // Exclude the search text field from auto-submit.
    $form['search']['#attributes']['class'][] = 'ctools-auto-submit-exclude';
    // Trigger the alternate exposed form, see
    // gsb_feature_event_display_preprocess_views_exposed_form().
    $form['#gsb_feature_event_display'] = TRUE;
    // Remove the ' Admissions' suffix from admissions options.
    foreach ($form['admissions']['#options'] as &$option) {
      $option = str_replace(' Admissions', '', $option);
    }
  }
  elseif ($form_state['view']->name == 'admission_events') {

    // Directly manipulate the exposed sorts to work with clicksort.
    if (isset($_GET['sort_order']) && !isset($_GET['order'])) {
      $_GET['sort'] = $_GET['sort_order'];
      $_GET['order'] = 'field_event_date_value';
    }

    $form['#attributes']['class'][] = 'exposed_filter_widget';
    $form['#attributes']['class'][] = 'exposed_filter_widget_one_column';

    $form['#attached']['js'][] = drupal_get_path('module', 'gsb_feature_event_display') . '/js/gsb_feature_event_display.views.js';
    $form['#attached']['js'][] = array(
      'type' => 'setting',
      'data' => array(
        'gsb_feature_event_display' => array(
          'admission_event_active' => (isset($_GET['date_op']) && $_GET['date_op'] == '<') ? 'past' : 'upcoming',
        ),
      ),
    );
    // Force the form to always sort by date.
    $form['sort_by'] = array(
      '#type' => 'value',
      '#value' => 'field_event_date_value',
    );
    // Prevent the date value from being exposed.
    $form['date'] = array('#type' => 'value');

    // Submit field_department_tid value from Pane settings.
    $form['field_department_tid'] = array(
      '#type' => 'hidden',
      '#value' => $form_state['input']['field_department_tid'],
    );
  }
}

/**
 * Implements hook_preprocess_HOOK() for views-exposed-form.tpl.php.
 */
function gsb_feature_event_display_preprocess_views_exposed_form(&$variables) {
  if (isset($variables['form']['#gsb_feature_event_display'])) {
    // Allow for an alternate template.
    $variables['theme_hook_suggestions'][] = 'views_exposed_form__events';
    // Split the first widget to go above the search button.
    $variables['widgets_top'][key($variables['widgets'])] = array_shift($variables['widgets']);
    // Put the remaining below the search button.
    $variables['widgets_bottom'] = $variables['widgets'];
  }
}

function gsb_feature_event_display_gsb_fpp_customizations_icons_alter(&$icons) {
  $module_path = drupal_get_path('module', 'gsb_feature_event_display');
  $icons_settings = array(
    'views_panes:gsb_event-upcoming_events' => 'upcoming-events.png',
    'views_panes:gsb_event-event_calendar_pane' => 'GSB_event_calendar.png',
    'views_panes:gsb_event-event_listing_pane' => 'GSB_event_listing.png',
    'views_panes:gsb_event-frontpage' => 'GSB_event_frontpage.png',
  );
  foreach($icons_settings as $key => $value) {
    if (isset($icons[$key]['icon'])) {
      $icons[$key]['icon'] = $module_path . '/images/' . $value;
    }
  }
}

